PROJECT_ROOT = File.expand_path("..", __dir__)
VERSION_FILE = File.join(PROJECT_ROOT, "version.properties")

def parse_version_props
  props = {}
  File.read(VERSION_FILE).each_line do |line|
    next if line.strip.empty? || line.strip.start_with?("#")
    key, value = line.strip.split("=", 2)
    props[key] = value
  end
  name = props["VERSION_NAME"]
  raise "VERSION_NAME not found in #{VERSION_FILE}" if name.nil?
  code_str = props["VERSION_CODE"]
  raise "VERSION_CODE not found in #{VERSION_FILE}" if code_str.nil?
  { name: name, code: code_str.to_i }
end

def write_version_props(new_name, new_code)
  File.open(VERSION_FILE, "w") do |f|
    f.puts("VERSION_NAME=#{new_name}")
    f.puts("VERSION_CODE=#{new_code}")
  end
end

def run_git_commit(message)
  Dir.chdir(PROJECT_ROOT) do
    sh("git add version.properties")
    sh("git commit -m '#{message}'")
  end
end

platform :android do
  desc "Bump patch version (x.y.Z → x.y.Z+1)"
  lane :bump_patch do
    bump_version(:patch)
  end

  desc "Bump minor version (x.y.Z → x.(y+1).0)"
  lane :bump_minor do
    bump_version(:minor)
  end

  desc "Bump major version (x.y.Z → (x+1).0.0)"
  lane :bump_major do
    bump_version(:major)
  end

  desc "Runs all the tests"
  lane :test do
    gradle(task: "test")
  end

  desc "Submit a new Beta Build to Crashlytics Beta"
  lane :beta do
    gradle(task: "clean assembleRelease")
    crashlytics
  end

  desc "Deploy a new version to the Google Play"
  lane :deploy do
    gradle(task: "clean assembleRelease")
    upload_to_play_store
  end
end

# Helper to bump version based on type

def bump_version(type)
  version = parse_version_props
  parts = version[:name].split(".").map(&:to_i)
  major, minor, patch = parts
  case type
  when :patch
    patch += 1
  when :minor
    minor += 1
    patch = 0
  when :major
    major += 1
    minor = 0
    patch = 0
  end
  new_name = [major, minor, patch].join(".")
  new_code = major * 10000 + minor * 100 + patch
  write_version_props(new_name, new_code)
  run_git_commit("chore: bump #{type} version to #{new_name}")
end
