default_platform(:android)

# Define project root and version file path
PROJECT_ROOT = File.expand_path("..", __dir__)
VERSION_FILE = File.join(PROJECT_ROOT, "version.properties")

# Parses version.properties at project root, skipping blank/comments
def parse_version_props
  props = {}
  File.read(VERSION_FILE).each_line do |line|
    next if line.strip.empty? || line.strip.start_with?("#")
    key, value = line.strip.split("=", 2)
    props[key] = value
  end
  name = props["VERSION_NAME"]
  raise "VERSION_NAME not found in #{VERSION_FILE}" if name.nil? || name.empty?
  code_str = props["VERSION_CODE"]
  raise "VERSION_CODE not found in #{VERSION_FILE}" if code_str.nil? || code_str.empty?
  { name: name, code: code_str.to_i }
end

# Writes new version values to version.properties
def write_version_props(new_name, new_code)
  File.open(VERSION_FILE, "w") do |f|
    f.puts("VERSION_NAME=#{new_name}")
    f.puts("VERSION_CODE=#{new_code}")
  end
end

# Commits version.properties using Git from project root
def run_git_commit(message)
  Dir.chdir(PROJECT_ROOT) do
    sh("git add version.properties")
    sh("git commit version.properties -m \"#{message}\"")
  end
end

# Generic bump helper: :patch, :minor, :major
def bump_version(type)
  version = parse_version_props
  major, minor, patch = version[:name].split('.').map(&:to_i)
  case type
  when :patch
    patch += 1
  when :minor
    minor += 1
    patch = 0
  when :major
    major += 1
    minor = 0
    patch = 0
  else
    raise "Unknown bump type: #{type}"
  end
  new_name = [major, minor, patch].join('.')
  new_code = major * 10_000 + minor * 100 + patch
  write_version_props(new_name, new_code)
  run_git_commit("chore: bump #{type} version to #{new_name}")
end

platform :android do
  ########################################
  # CF (Alpha) release lane
  ########################################
  desc "CF (Alpha) release: bump patch, build release APK, and upload via Firebase CLI"
  lane :cf_release do
    # 1️⃣ Bump patch version in version.properties
    bump_version(:patch)

    # 2️⃣ Remove old build folder to avoid file-lock issues
    require 'fileutils'
    FileUtils.rm_rf(File.join(PROJECT_ROOT, 'app', 'build'))

    # 3️⃣ Assemble the Release APK
    gradle(
      task: "assembleRelease",
      project_dir: PROJECT_ROOT,
      flags: "--no-daemon"
    )

    # 4️⃣ Distribute via Firebase CLI
    apk_path = lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]
    sh(
      "firebase appdistribution:distribute \"#{apk_path}\" " \
      "--app #{ENV['FIREBASE_APP_ID_CF']} " \
      "--groups \"#{ENV['FIREBASE_CF_GROUP']}\" " \
      "--token #{ENV['FIREBASE_TOKEN']}"
    )
  end

  ########################################
  # Beta release lane
  ########################################
  desc "Beta release: bump patch, build release APK, and distribute to beta testers"
  lane :beta_release do
    # 1️⃣ Bump patch version
    bump_version(:patch)

    # 2️⃣ Remove old build folder
    require 'fileutils'
    FileUtils.rm_rf(File.join(PROJECT_ROOT, 'app', 'build'))

    # 3️⃣ Assemble the Release APK
    gradle(
      task: "assembleRelease",
      project_dir: PROJECT_ROOT,
      flags: "--no-daemon"
    )

    # 4️⃣ Distribute via Firebase CLI to Beta group
    apk_path = lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]
    sh(
      "firebase appdistribution:distribute \"#{apk_path}\" " \
      "--app #{ENV['FIREBASE_APP_ID_BETA']} " \
      "--groups \"#{ENV['FIREBASE_BETA_GROUP']}\" " \
      "--token #{ENV['FIREBASE_TOKEN']}"
    )
  end

  ########################################
  # Dev build on every commit
  ########################################
  desc "Dev build: assemble a timestamped debug APK on each commit"
  lane :dev_build do
    # 1️⃣ Stop any running Gradle daemons (avoid locked files)
    sh("gradlew --stop -p #{PROJECT_ROOT}")

    # 2️⃣ Optionally clean project to get a fresh build (uncomment if needed)
    # sh("gradlew -p #{PROJECT_ROOT} clean")

    # 3️⃣ Assemble the Debug APK. Gradle’s build.gradle.kts will inject
    #    a versionNameSuffix and computed versionCode for debug automatically.
    gradle(
      task: "assembleDebug",
      project_dir: PROJECT_ROOT,
      flags: "--no-daemon"
    )

    # 4️⃣ (Optional) Distribute the debug APK via Firebase CLI to “dev-testers”
    # apk = lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]
    # sh(
    #   "firebase appdistribution:distribute \"#{apk}\" " \
    #   "--app #{ENV['FIREBASE_APP_ID_CF']} " \
    #   "--groups \"dev-testers\" " \
    #   "--token #{ENV['FIREBASE_TOKEN']}"
    # )
  end

  ########################################
  # Semantic version bump lanes
  ########################################
  desc "Bump patch version (x.y.Z → x.y.Z+1)"
  lane :bump_patch do
    bump_version(:patch)
  end

  desc "Bump minor version (x.y.Z → x.(y+1).0)"
  lane :bump_minor do
    bump_version(:minor)
  end

  desc "Bump major version (x.y.Z → (x+1).0.0)"
  lane :bump_major do
    bump_version(:major)
  end

  ########################################
  # Other lanes: test, crashlytics beta, deploy
  ########################################
  desc "Runs all the tests"
  lane :test do
    gradle(task: "test")
  end

  desc "Submit a new Beta Build to Crashlytics Beta"
  lane :beta do
    gradle(task: "clean assembleRelease")
    crashlytics
  end

  desc "Deploy a new version to the Google Play"
  lane :deploy do
    gradle(task: "clean assembleRelease")
    upload_to_play_store
  end
end
